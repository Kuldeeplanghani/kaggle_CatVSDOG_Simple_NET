{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "##Loading Libraries\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "import os\n",
    "##Loading TensorFlow\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## Module for the preprocessing of the dataset\n",
    "def  load_data(directory): \n",
    "    files = os.listdir(\"./\"+directory)\n",
    "    num = len(files)\n",
    "    data = np.empty((num,120000),dtype=\"float32\")\n",
    "    label = np.empty((num,2),dtype =\"float32\")\n",
    "    for i in range(num):\n",
    "        if not files[i].startswith('.'):\n",
    "            label[i,0]=0 if files[i].split('.')[0]=='cat' else 1\n",
    "            label[i,1]=1 if files[i].split('.')[0]=='cat' else 0\n",
    "            img = Image.open(\"./\"+directory+\"/\"+files[i])\n",
    "            img = img.resize((200,200), Image.ANTIALIAS)\n",
    "            Image_array = np.asImage_arrayay (img, dtype =\"float32\")\n",
    "            Image_array= Image_array.flatten() \n",
    "            data[i,:]= Image_array\n",
    "            img.close()\n",
    "    return data, label\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Loading Traing Data\n",
    "a = load_data(\"Sample_train\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception AssertionError: AssertionError(\"Nesting violated for default stack of <type 'weakref'> objects\",) in <bound method InteractiveSession.__del__ of <tensorflow.python.client.session.InteractiveSession object at 0x7f1ca1afbdd0>> ignored\n"
     ]
    }
   ],
   "source": [
    "#Session and Variable Definition\n",
    "sess = tf.InteractiveSession()\n",
    "x = tf.placeholder(tf.float32, shape=[None, 120000])\n",
    "y_ = tf.placeholder(tf.float32, shape=[None, 2])\n",
    "W = tf.Variable(tf.zeros([120000,2]))\n",
    "b = tf.Variable(tf.zeros([2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Variable Initialization \n",
    "sess.run(tf.initialize_all_variables())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## SoftMax\n",
    "y = tf.nn.softmax(tf.matmul(x,W) + b)\n",
    "#Loss Function\n",
    "cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n",
    "#Gredient Descent\n",
    "train_step = tf.train.GradientDescentOptimizer(1.0).minimize(cross_entropy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Training\n",
    "for i in range(100):\n",
    "  batch = a\n",
    "  train_step.run(feed_dict={x: batch[0], y_: batch[1]})\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Accuracy: ', 53.600001335144043)\n"
     ]
    }
   ],
   "source": [
    "correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "print(\"Accuracy: \", accuracy.eval(feed_dict={x: a[0], y_: a[1]}) * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
